/*
 * Copyright (c) 2023 OceanBase
 * OCP Express is licensed under Mulan PSL v2.
 * You can use this software according to the terms and conditions of the Mulan PSL v2.
 * You may obtain a copy of Mulan PSL v2 at:
 *          http://license.coscl.org.cn/MulanPSL2
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
 * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
 * MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
 * See the Mulan PSL v2 for more details.
 */

package com.oceanbase.ocp.obsdk.operator.session.model;

import static javax.swing.plaf.synth.Region.LABEL;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections4.CollectionUtils;

import com.alibaba.druid.support.json.JSONUtils;

import lombok.Data;
import lombok.extern.slf4j.Slf4j;

@Data
@Slf4j
public class PrimaryKey {

    private static final String MSG_FOR_OVERSIZE_ROW_KEY = "RowKey of %s.%s is too long to parse";

    private List<ObPrimaryKeyColumn> primaryKeyColumns;
    private String databaseName;
    private String tableName;
    boolean autoGenerated;

    public PrimaryKey(String databaseName, String tableName, List<ObPrimaryKeyColumn> primaryKeyColumns) {
        this.databaseName = databaseName;
        this.tableName = tableName;
        primaryKeyColumns.sort(Comparator.comparingInt(ObPrimaryKeyColumn::getRowKeyPosition));
        if (primaryKeyColumns.size() == 1 && primaryKeyColumns.get(0).isHidden()) {
            this.autoGenerated = true;
        }
        this.primaryKeyColumns = primaryKeyColumns;
    }

    public String parseRowKey(String rowKey) {
        rowKey = rowKey.substring(rowKey.indexOf("rowkey_object="));
        if (CollectionUtils.isEmpty(this.primaryKeyColumns)) {
            return rowKey;
        }
        rowKey = rowKey.replaceAll("collation", "\"collation\"");
        rowKey = rowKey.replaceAll("coercibility", "\"coercibility\"");
        StringBuilder sb = new StringBuilder();
        List<Map<String, Object>> keys = new ArrayList<>();
        try {
            keys = (List<Map<String, Object>>) JSONUtils.parse(rowKey.substring(rowKey.indexOf('[')).trim());
        } catch (Exception e) {
            log.warn("Error in deserialize rowKey:{}, primaryKey:{}, maybe it has been truncated for oversize",
                    rowKey, primaryKeyColumns);
        }
        // 说明由于主键内容太大而被OB截断了
        if (keys.size() < primaryKeyColumns.size()) {
            return String.format(MSG_FOR_OVERSIZE_ROW_KEY, databaseName, tableName);
        }
        for (int i = 0; i < keys.size(); i++) {
            String columnName = this.primaryKeyColumns.get(i).getColumnName();
            String value = keys.get(i).values().iterator().next().toString();
            sb.append(columnName).append(":").append(value).append(" ");
            if (keys.size() < primaryKeyColumns.size()) {
                sb.append(LABEL);
            }
        }
        return sb.toString().trim();
    }
}
